set nocompatible
set nowrap

filetype off

au!

let bundle = '~/.vim/bundle'

exec 'set rtp+='+bundle+'/Vundle.vim'
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin(bundle)

Plugin 'gmarik/Vundle'
Plugin 'morhetz/gruvbox'
" Plugin 'Valloric/YouCompleteMe'
Plugin 'kien/ctrlp.vim'
" Plugin 'funorpain/vim-cpplint'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'tpope/vim-surround'
Plugin 'scrooloose/nerdcommenter'
Plugin 'scrooloose/nerdtree'
Plugin 'embear/vim-localvimrc'
Plugin 'clones/vim-fuzzyfinder'
Plugin 'clones/vim-l9'
Plugin 'junegunn/vim-easy-align'
Plugin 'kana/vim-fakeclip'
Plugin 'tpope/vim-fugitive.git'
Plugin 'nfvs/vim-perforce'
" Plugin 'tpope/vim-commentary'
" Plugin 'vim-scripts/UltiSnips'
" Plugin 'scrooloose/syntastic'
" Plugin 'tomtom/tlib_vim'
" Plugin 'MarcWeber/vim-addon-mw-utils'
" Plugin 'gmarik/snipmate.vim'
" Plugin 'vim-scripts/ragtag.vim'
" Plugin 'altercation/vim-colors-solarized'
" Plugin 'nelstrom/vim-mac-classic-theme.git'
Plugin 'klen/python-mode'
" Plugin 'c.vim'
Plugin 'vim-airline/vim-airline'
" Plugin 'mhinz/vim-signify'


call vundle#end()

syntax on
filetype plugin indent on      " Automatically detect file types.
"set relativenumber
set directory=~/.vim/swap//

" set gruvbox color scheme
colorscheme gruvbox
set background=dark

let g:NERDSpaceDelims = 1

"setl expandtab tabstop=4 shiftwidth=4 softtabstop=4
au FileType * setl expandtab tabstop=4 shiftwidth=4 softtabstop=4
au FileType python setl expandtab tabstop=4 shiftwidth=4 softtabstop=4
au FileType cpp setl expandtab tabstop=4 shiftwidth=4 softtabstop=4

au BufWritePost $MYVIMRC :source $MYVIMRC | :execute 'PluginInstall' | :pclose


let mapleader="\\"
let maplocalleader="\\"
set pastetoggle=<F10>
set hls

" === VIM MAPPINGS ===

" close buffer
noremap <leader>q :bd<cr>
" disable key arrow for sake of native vi navigation
noremap  <Up>    <esc>:wincmd k<cr>
noremap  <Down>  <esc>:wincmd j<cr>
noremap  <Left>  <esc>:wincmd h<cr>
noremap  <Right> <esc>:wincmd l<cr>
" tabs navigation
noremap  <PageUp>        :tabprevious<cr>
noremap  <PageDown>      :tabnext<cr>
inoremap <PageUp>   <esc>:tabprevious<cr>
inoremap <PageDown> <esc>:tabnext<cr>
noremap  <c-W>C          :tabclose<cr>
noremap  <leader>nt      :tabedit %<cr>
" buffers navigation
nnoremap <c-h> :bprevious<cr>
nnoremap <c-l> :bnext<cr>
" escape alt
inoremap jk <Esc>
" redo
nnoremap U :redo<cr>
" fast switching between dark and light color themes
noremap <leader>bd <esc>:set background=dark<cr>
noremap <leader>bl <esc>:set background=light<cr>
" insert filename
:inoremap <leader>if <C-R>=expand("%:t")<CR>

nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>


" I write :W accidentally very often
:command! W :w
:command! SW :w !sudo tee %


let g:localvimrc_whitelist=$HOME.'/.*'
let g:localvimrc_sandbox=0
" let g:UltiSnipsExpandTrigger="<tab>"
" let g:UltiSnipsJumpForwardTrigger="<tab>"
" let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

" inoremap <tab> <c-r>=UltiSnips_ExpandSnippet()<cr>

" let g:cpplint_cmd_filter = '-runtime/references'
" let g:cpplint_cmd_linelength = '120'
" let g:cpplint_cmd_root = 'include'
" let g:cpplint_cmd_root = '/home/bepec/dev/pase/App/Media/imp/Miracast/src/'

let g:ctrlp_working_path_mode = 'wr'
:noremap <c-b> :CtrlPBuffer<cr>


" === FUZZY FINDER ===
let g:fuf_coveragefile_exclude='^(CMakeFiles/|ut/|Tests/)|\.(o|so|bak|orig|swp)$'
" mappings
:noremap <leader>fj :FufBufferTag<cr>
:noremap <leader>fl :FufLine<cr>
:noremap <leader>fk :FufBuffer<cr>
:noremap <leader>ff :FufCoverageFile<cr>


" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
vmap <Enter> <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. <Leader>aip)
nmap <Leader>a <Plug>(EasyAlign)


" === YouCompleteMe ===
let g:ycm_extra_conf_globlist = ['~/p4/*','!~/*']
let g:ycm_auto_start_csharp_server = 0
let g:ycm_server_use_vim_stdout = 0
let g:ycm_server_log_level = 'debug'
let g:ycm_auto_trigger = 1
let g:ycm_add_preview_to_completeopt = 1
" Go to definition or declaration whatever
nmap <leader>fd :YcmCompleter GoTo<cr>


" === SILVER SEARCHER ===
if executable('ag')
    " Use ag over grep
    set grepprg=ag\ --nogroup\ --nocolor
    " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
    let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
    " ag is fast enough that CtrlP doesn't need to cache
    " let g:ctrlp_use_caching = 0
endif
" Find (grep) usages of word under the cursor
nmap <leader>fu :grep --ignore tags -w <cword> ./<cr><cr><C-O>:cw<cr>

" === VIM AIRLINE===
let g:airline_extensions = ['branch', 'tabline']
let g:airline#extensions#tabline#enabled = 1
" let g:airline#extensions#branch#enabled = 1
